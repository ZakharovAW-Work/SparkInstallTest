# version: '3'
# services:
#   # Spark Master
#   spark-master:
#     image: bitnami/spark:3.5
#     ports:
#       - "8080:8080"  # Web-интерфейс Spark
#       - "7077:7077"  # Порт для подключения воркеров и приложений
#     environment:
#       - SPARK_MODE=master
#     networks:
#       - spark-net

#   # Spark Worker
#   spark-worker:
#     image: bitnami/spark:3.5
#     depends_on:
#       - spark-master
#     environment:
#       - SPARK_MODE=worker
#       - SPARK_MASTER_URL=spark://spark-master:7077
#     networks:
#       - spark-net

#   # Ваше приложение (отдельный контейнер)
#   spark-app:
#     build: .  # Собираем образ из Dockerfile
#     depends_on:
#       - spark-master
#     networks:
#       - spark-net
#     environment:
#       - SPARK_MASTER=spark://spark-master:7077

# networks:
#   spark-net:
#     driver: bridge

# -----------------------------------------------------------------------------------------------
# version: '3'
# services:
#   spark-master:
#     image: bitnami/spark:3.5
#     ports:
#       - "8080:8080"  # Web UI
#     environment:
#       - SPARK_MODE=master

#   spark-worker:
#     image: bitnami/spark:3.5
#     depends_on:
#       - spark-master
#     environment:
#       - SPARK_MODE=worker
#       - SPARK_MASTER_URL=spark://spark-master:7077


# ---------------------------------------------------------------
# services:
#   spark-master:
#     container_name: spark-master
#     build: .
#     image: spark-image
#     entrypoint: ['./entrypoint.sh', 'master']
#     healthcheck:
#       test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
#       interval: 5s
#       timeout: 3s
#       retries: 3
#     volumes:
#       - ./scripts:/opt/spark/scripts
#       - ./data:/opt/spark/data
#       - spark-logs:/opt/spark/spark-events
#     env_file:
#       - .env.spark
#     ports:
#       - '8080:8080'
#       - '7077:7077'

#   spark-history-server:
#     container_name: spark-history
#     image: spark-image
#     entrypoint: ['./entrypoint.sh', 'history']
#     depends_on:
#       - spark-master
#     env_file:
#       - .env.spark
#     volumes:
#       - ./scripts:/opt/spark/scripts
#       - ./data:/opt/spark/data
#       - spark-logs:/opt/spark/spark-events
#     ports:
#       - '18080:18080'

#   spark-worker:
#     container_name: spark-worker
#     image: spark-image
#     entrypoint: ['./entrypoint.sh', 'worker']
#     depends_on:
#       - spark-master
#     env_file:
#       - .env.spark
#     volumes:
#       - ./scripts:/opt/spark/scripts
#       - ./data:/opt/spark/data
#       - spark-logs:/opt/spark/spark-events

# volumes:
#   spark-logs:









# -----------------------------------------------------------------------------
version: "3"

services:
  spark-iceberg:
    image: tabulario/spark-iceberg
    container_name: spark-iceberg
    build: spark/
    networks:
      iceberg_net:
    depends_on:
      - rest
      - minio
    volumes:
      - ./warehouse:/home/iceberg/warehouse
      - ./notebooks:/home/iceberg/notebooks/notebooks
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    ports:
      - 8888:8888
      - 8080:8080
      - 10000:10000
      - 10001:10001
  rest:
    image: apache/iceberg-rest-fixture
    container_name: iceberg-rest
    networks:
      iceberg_net:
    ports:
      - 8181:8181
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
      - CATALOG_WAREHOUSE=s3://warehouse/
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_ENDPOINT=http://minio:9000
  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=minio
    networks:
      iceberg_net:
        aliases:
          - warehouse.minio
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]
  mc:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    networks:
      iceberg_net:
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    entrypoint: |
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force minio/warehouse;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc policy set public minio/warehouse;
      tail -f /dev/null
      "
networks:
  iceberg_net: